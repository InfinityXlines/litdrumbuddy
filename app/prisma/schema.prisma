generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/litdrumbuddy/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Core application models
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    resetToken    String?   @unique
    resetTokenExpiry DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    accounts         Account[]
    sessions         Session[]
    practiceSessions PracticeSession[]
    userSettings     UserSettings?
    metronomePresets MetronomePreset[]
    customExercises  Exercise[]

    @@map("users")
}

model Category {
    id          String @id @default(cuid())
    name        String @unique
    description String?
    color       String? // Hex color for UI theming
    sortOrder   Int    @default(0)
    
    exercises Exercise[]
    
    @@map("categories")
}

model Exercise {
    id           String  @id @default(cuid())
    name         String
    description  String?
    instructions String? @db.Text
    difficulty   Int     @default(1) // 1-5 scale
    suggestedBpm Int?
    timeSignature String @default("4/4")
    isPreset     Boolean @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    
    // Relations
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    
    createdByUserId String?
    createdBy       User?   @relation(fields: [createdByUserId], references: [id])
    
    practiceSessions PracticeSession[]
    
    @@map("exercises")
}

model PracticeSession {
    id           String   @id @default(cuid())
    startTime    DateTime @default(now())
    endTime      DateTime?
    duration     Int?     // Duration in seconds
    bpm          Int?     // Metronome BPM used
    rating       Int?     // 1-5 performance rating
    mood         String?  // User's mood during practice
    focusLevel   Int?     // 1-5 focus rating
    notes        String?  @db.Text
    completed    Boolean  @default(false)
    createdAt    DateTime @default(now())
    
    // Relations
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    exerciseId String?
    exercise   Exercise? @relation(fields: [exerciseId], references: [id])
    
    @@map("practice_sessions")
}

model UserSettings {
    id                    String  @id @default(cuid())
    theme                 String  @default("dark") // "light" or "dark"
    defaultMetronomeSound String  @default("click")
    defaultBpm            Int     @default(120)
    dailyGoalMinutes      Int     @default(30)
    enableNotifications   Boolean @default(true)
    weeklyGoalMinutes     Int     @default(210) // 30 min * 7 days
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    
    // Relations
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("user_settings")
}

model MetronomePreset {
    id            String @id @default(cuid())
    name          String
    bpm           Int
    timeSignature String @default("4/4")
    subdivision   String @default("quarter") // quarter, eighth, sixteenth
    sound         String @default("click")
    volume        Float  @default(0.8)
    createdAt     DateTime @default(now())
    
    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@map("metronome_presets")
}
